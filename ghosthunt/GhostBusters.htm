<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><script src="GhostBusters_files/analytics.js" type="text/javascript"></script><script>try {
                        Object.defineProperty(screen, "availTop", { value: 0 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "availLeft", { value: 0 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "availWidth", { value: 1920 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "availHeight", { value: 1080 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "colorDepth", { value: 24 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "pixelDepth", { value: 24 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(navigator, "hardwareConcurrency", { value: 8 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(navigator, "appVersion", { value: "5.0 (Windows)" });
                    } catch (e) {}
                    try {
                        Object.defineProperty(navigator, "doNotTrack", { value: "unspecified" });
                    } catch (e) {}
                    
            try {
                window.screenY = 1072
            } catch (e) { }
        
            try {
                window.screenTop = 1072
            } catch (e) { }
        
            try {
                window.top.window.outerHeight = window.screen.height
            } catch (e) { }
        
            try {
                window.screenX = 1912
            } catch (e) { }
        
            try {
                window.screenLeft = 1912
            } catch (e) { }
        
            try {
                window.top.window.outerWidth = window.screen.width
            } catch (e) { }
        </script>
<script type="text/javascript">window.addEventListener('DOMContentLoaded',function(){var v=archive_analytics.values;v.service='wb';v.server_name='wwwb-app101.us.archive.org';v.server_ms=202;archive_analytics.send_pageview({});});</script><script type="text/javascript" src="GhostBusters_files/playback.js" charset="utf-8"></script>
<script type="text/javascript" src="GhostBusters_files/wombat.js" charset="utf-8"></script>
<script type="text/javascript">
  __wm.init("https://web.archive.org/web");
  __wm.wombat("https://shroomdruid.github.io/GhostBusters/","20201101075748","https://web.archive.org/","web","/_static/",
	      "1604217468");
</script>
<link rel="stylesheet" type="text/css" href="GhostBusters_files/banner-styles.css">
<link rel="stylesheet" type="text/css" href="GhostBusters_files/iconochive.css">
<!-- End Wayback Rewrite JS Include -->


        <link href="GhostBusters_files/css2.css" rel="stylesheet">


        <style type="text/css">
            * {
                margin: 0;
                padding: 0;
            }

            body { 
                background: url('/web/20201101075748im_/https://shroomdruid.github.io/GhostBusters/journal.jpg');
            }

            #wrapper {
                padding: 25px;
                display: flex;
            }

            #ghosts {
                font-family: 'Kalam', cursive;
                color: rgb(45,45,45);
                border-left: solid rgb(45,45,45) 3px;
                margin-left: 5px;
                padding-left: 25px;
            }

            #possibleGhosts {
                list-style: square inside url("/web/20201101075748im_/https://shroomdruid.github.io/GhostBusters/x.png");
                text-transform: uppercase;
            }

            #possibleGhosts li {
                font-size: 2em;
                color: rgb(100,50,50);
            }

            #possibleGhosts p {
                margin-top: -10px;
                margin-bottom: 10px;
            }

            #evidence {
                font-family: 'Kalam', cursive;
                color: rgb(45,45,45);
            }

            #evidence h1 {
                margin-bottom: 15px;
            }

            #evidence .button {
                margin-bottom: 15px;
            }

            #emf,#spiritbox,#fingerprints,#ghostorbs,#ghostwritings,#freezingtemperatures {
                width: 355px;
                height: 38px;
                background-repeat: no-repeat;
                background-position: left;
            }

            #emf:hover,#spiritbox:hover,#fingerprints:hover,#ghostorbs:hover,#ghostwritings:hover,#freezingtemperatures:hover {
                cursor: pointer;
            }

            #emf {
                background-image: url('/web/20201101075748im_/https://shroomdruid.github.io/GhostBusters/btnsUnchecked/emf.png');
            }

            #spiritbox {
                background-image: url('/web/20201101075748im_/https://shroomdruid.github.io/GhostBusters/btnsUnchecked/spiritbox.png');
            }

            #fingerprints {
                background-image: url('/web/20201101075748im_/https://shroomdruid.github.io/GhostBusters/btnsUnchecked/fingerprints.png');
            }

            #ghostorbs {
                background-image: url('/web/20201101075748im_/https://shroomdruid.github.io/GhostBusters/btnsUnchecked/ghostorbs.png');
            }

            #ghostwritings {
                background-image: url('/web/20201101075748im_/https://shroomdruid.github.io/GhostBusters/btnsUnchecked/ghostwritings.png');
            }

            #freezingtemperatures {
                background-image: url('/web/20201101075748im_/https://shroomdruid.github.io/GhostBusters/btnsUnchecked/freezingtemperatures.png');
            }

            .weakness {
                color: rgb(0, 88, 0);
            }
        </style>
        
        <script src="GhostBusters_files/lodash.js"></script>

        <script>
            // 1 = EMF level 5
            // 2 = Spirit Box
            // 3 = Fingerprints
            // 4 = Ghost Orbs 
            // 5 = Ghost Writings
            // 6 = Freezing Temperatures

            // ghost definitions
            const ghostInfos = [
                { name : "spirit", evidences : [2,3,5], description: "<b>Spiritbox + Fingerprints + Writings</b><br />No strengths. <span class='weakness'>Smudge sticks will pacify it for a while.</span>"},
                { name : "wraith", evidences : [2,3,6], description: "<b>Spiritbox + Fingerprints + Freezing temps</b><br />Floats, footsteps rare. <span class='weakness'>Has toxicity to salt.</span>"},
                { name : "phantom", evidences : [1,4,6], description: "<b>EMF Level 5 + Orbs + Freezing temps</b><br />Seeing it drops sanity fast. <span class='weakness'>Taking its photo makes it hide for a while.</span>"},
                { name : "poltergeist", evidences : [2,3,4], description: "<b>Spiritbox + Fingerprints + Orbs</b><br />Can throw objects around. <span class='weakness'>Ineffective in empty rooms.</span>"},
                { name : "banshee", evidences : [1,3,6], description: "<b>EMF Level 5 + Fingerprints + Freezing temps</b><br />Targets lone individuals. <span class='weakness'>Fears crucifix & less aggressive near them.</span>"},
                { name : "jinn", evidences : [1,2,4], description: "<b>EMF Level 5 + Spiritbox + Orbs</b><br />Travels fast if victim is far. <span class='weakness'>Kill electricity to stop its powers.</span>"},
                { name : "mare", evidences : [2,4,6], description: "<b>Spiritbox + Orbs + Freezing temps</b><br />More chances to attack in darkness. <span class='weakness'>Turn lights on to reduce aggression.</span>"},
                { name : "revenant", evidences : [1,3,5], description: "<b>EMF Level 5 + Fingerprints + Writings</b><br />Travels fast when hunting. <span class='weakness'>Moves slowly if it can't see humans.</span>"},
                { name : "shade", evidences : [1,4,5], description: "<b>EMF Level 5 + Orbs + Writings</b><br />Shy/hard to find. Less activity around groups. <span class='weakness'>Can't hunt if multiple people around.</span>"},
                { name : "demon", evidences : [2,5,6], description: "<b>Spiritbox + Writings + Freezing temps</b><br />Very aggressive. Attacks often. <span class='weakness'>Ouija board use won't affect sanity.</span>"},
                { name : "yurei", evidences : [4,5,6], description: "<b>Orbs + Writings + Freezing temps</b><br />Strong effect on sanity. <span class='weakness'>Smudging its room contains it to that room for a while.</span>"},
                { name : "oni", evidences : [1,2,5], description: "<b>EMF Level 5 + Spiritbox + Writings</b><br />More active with people nearby. <span class='weakness'>High activity makes it easier to find and identify.</span>"},
            ]


            // Do not touch v
            function getGhostInfoMatches(present, notPresent){
                return Object.values(_.pickBy(_.omitBy(ghostInfos,ghost =>
                        ghost.evidences.some(r=> notPresent.indexOf(r) >= 0)
                    ), ghost =>
                        present.every(r=> ghost.evidences.indexOf(r) >= 0)
                ))
            }

            function getRemainingEvidenceIds(present, notPresent) {
                return _.difference(_.flatMap(getGhostInfoMatches(present, notPresent), gi=> gi.evidences), present)
            }
            // Do not touch ^

            let evidenceArray = [];

            function toggleEvidence(evidence) {    

                console.clear();

                // if that evidence doesn't exist in the array (-1)
                if(evidenceArray.indexOf(evidence) === -1){
                    evidenceArray.push(evidence);
                } else {
                    evidenceArray.splice(evidenceArray.indexOf(evidence), 1);
                }

                // get ghost matches according to entered evidence
                document.getElementById("possibleGhosts").innerHTML = "";

                getGhostInfoMatches(evidenceArray,[]).forEach(ghostInfo => { // getGhostMatches([foundEvidence], [missingEvidence])
                    document.getElementById("possibleGhosts").innerHTML += '<li>' + ghostInfo.name + '</li> <p>' + ghostInfo.description;
                })

                if (evidenceArray.length == 0) {
                    document.getElementById("possibleGhosts").innerHTML = "<br /><p>We need tangible evidence. I should check rooms with an EMF reader for activity, or a thermometer for sub-zero temperatures.</p>";
                }

                document.getElementById("emf").style.backgroundImage = "url('btnsDisabled/emf.png')";
                document.getElementById("spiritbox").style.backgroundImage = "url('btnsDisabled/spiritbox.png')";
                document.getElementById("fingerprints").style.backgroundImage = "url('btnsDisabled/fingerprints.png')";
                document.getElementById("ghostorbs").style.backgroundImage = "url('btnsDisabled/ghostorbs.png')";
                document.getElementById("ghostwritings").style.backgroundImage = "url('btnsDisabled/ghostwritings.png')";
                document.getElementById("freezingtemperatures").style.backgroundImage = "url('btnsDisabled/freezingtemperatures.png')";
                                
                getRemainingEvidenceIds(evidenceArray,[]).forEach(evidenceId => {
                    document.getElementById(getEvidenceByID(evidenceId)).style.backgroundImage = "url('btnsUnchecked/" + getEvidenceByID(evidenceId) + ".png')"; // enabled button (possible evidence)
                })

                for (var i = 0; i < evidenceArray.length; i++){
                    document.getElementById(getEvidenceByID(evidenceArray[i])).style.backgroundImage = "url('btnsChecked/" + getEvidenceByID(evidenceArray[i]) + ".png')"; // selected button
                }
                
            }

            function getEvidenceByID(id){
                switch(id) {
                    case 1:
                        return "emf";
                        break;
                    case 2:
                        return "spiritbox";
                        break;
                    case 3:
                        return "fingerprints";
                        break;
                    case 4:
                        return "ghostorbs";
                        break;
                    case 5:
                        return "ghostwritings";
                        break;
                    case 6:
                        return "freezingtemperatures";
                        break;
                    default:
                        return "error";
                }
            }
        </script>

    <script>try {
                        Object.defineProperty(screen, "availTop", { value: 0 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "availLeft", { value: 0 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "availWidth", { value: 1920 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "availHeight", { value: 1080 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "colorDepth", { value: 24 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "pixelDepth", { value: 24 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(navigator, "hardwareConcurrency", { value: 8 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(navigator, "appVersion", { value: "5.0 (Windows)" });
                    } catch (e) {}
                    try {
                        Object.defineProperty(navigator, "doNotTrack", { value: "unspecified" });
                    } catch (e) {}
                    
            try {
                window.screenY = 1072
            } catch (e) { }
        
            try {
                window.screenTop = 1072
            } catch (e) { }
        
            try {
                window.top.window.outerHeight = window.screen.height
            } catch (e) { }
        
            try {
                window.screenX = 1912
            } catch (e) { }
        
            try {
                window.screenLeft = 1912
            } catch (e) { }
        
            try {
                window.top.window.outerWidth = window.screen.width
            } catch (e) { }
        </script><script>try {
                        Object.defineProperty(screen, "availTop", { value: 0 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "availLeft", { value: 0 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "availWidth", { value: 1920 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "availHeight", { value: 1080 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "colorDepth", { value: 24 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "pixelDepth", { value: 24 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(navigator, "hardwareConcurrency", { value: 8 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(navigator, "appVersion", { value: "5.0 (Windows)" });
                    } catch (e) {}
                    try {
                        Object.defineProperty(navigator, "doNotTrack", { value: "unspecified" });
                    } catch (e) {}
                    
            try {
                window.screenY = 1072
            } catch (e) { }
        
            try {
                window.screenTop = 1072
            } catch (e) { }
        
            try {
                window.top.window.outerHeight = window.screen.height
            } catch (e) { }
        
            try {
                window.screenX = -8
            } catch (e) { }
        
            try {
                window.screenLeft = -8
            } catch (e) { }
        
            try {
                window.top.window.outerWidth = window.screen.width
            } catch (e) { }
        </script><script>try {
                        Object.defineProperty(screen, "availTop", { value: 0 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "availLeft", { value: 0 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "availWidth", { value: 1920 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "availHeight", { value: 1080 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "colorDepth", { value: 24 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "pixelDepth", { value: 24 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(navigator, "hardwareConcurrency", { value: 8 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(navigator, "appVersion", { value: "5.0 (Windows)" });
                    } catch (e) {}
                    try {
                        Object.defineProperty(navigator, "doNotTrack", { value: "unspecified" });
                    } catch (e) {}
                    
            try {
                window.screenY = 1072
            } catch (e) { }
        
            try {
                window.screenTop = 1072
            } catch (e) { }
        
            try {
                window.top.window.outerHeight = window.screen.height
            } catch (e) { }
        
            try {
                window.screenX = -8
            } catch (e) { }
        
            try {
                window.screenLeft = -8
            } catch (e) { }
        
            try {
                window.top.window.outerWidth = window.screen.width
            } catch (e) { }
        </script><script>try {
                        Object.defineProperty(screen, "availTop", { value: 0 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "availLeft", { value: 0 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "availWidth", { value: 1920 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "availHeight", { value: 1080 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "colorDepth", { value: 24 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "pixelDepth", { value: 24 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(navigator, "hardwareConcurrency", { value: 8 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(navigator, "appVersion", { value: "5.0 (Windows)" });
                    } catch (e) {}
                    try {
                        Object.defineProperty(navigator, "doNotTrack", { value: "unspecified" });
                    } catch (e) {}
                    
            try {
                window.screenY = 1072
            } catch (e) { }
        
            try {
                window.screenTop = 1072
            } catch (e) { }
        
            try {
                window.top.window.outerHeight = window.screen.height
            } catch (e) { }
        
            try {
                window.screenX = -8
            } catch (e) { }
        
            try {
                window.screenLeft = -8
            } catch (e) { }
        
            try {
                window.top.window.outerWidth = window.screen.width
            } catch (e) { }
        </script><script>try {
                        Object.defineProperty(screen, "availTop", { value: 0 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "availLeft", { value: 0 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "availWidth", { value: 1920 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "availHeight", { value: 1080 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "colorDepth", { value: 24 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "pixelDepth", { value: 24 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(navigator, "hardwareConcurrency", { value: 8 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(navigator, "appVersion", { value: "5.0 (Windows)" });
                    } catch (e) {}
                    try {
                        Object.defineProperty(navigator, "doNotTrack", { value: "unspecified" });
                    } catch (e) {}
                    
            try {
                window.screenY = 1072
            } catch (e) { }
        
            try {
                window.screenTop = 1072
            } catch (e) { }
        
            try {
                window.top.window.outerHeight = window.screen.height
            } catch (e) { }
        
            try {
                window.screenX = -8
            } catch (e) { }
        
            try {
                window.screenLeft = -8
            } catch (e) { }
        
            try {
                window.top.window.outerWidth = window.screen.width
            } catch (e) { }
        </script><script>try {
                        Object.defineProperty(screen, "availTop", { value: 0 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "availLeft", { value: 0 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "availWidth", { value: 1920 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "availHeight", { value: 1080 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "colorDepth", { value: 24 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "pixelDepth", { value: 24 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(navigator, "hardwareConcurrency", { value: 8 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(navigator, "appVersion", { value: "5.0 (Windows)" });
                    } catch (e) {}
                    try {
                        Object.defineProperty(navigator, "doNotTrack", { value: "unspecified" });
                    } catch (e) {}
                    
            try {
                window.screenY = 1072
            } catch (e) { }
        
            try {
                window.screenTop = 1072
            } catch (e) { }
        
            try {
                window.top.window.outerHeight = window.screen.height
            } catch (e) { }
        
            try {
                window.screenX = -8
            } catch (e) { }
        
            try {
                window.screenLeft = -8
            } catch (e) { }
        
            try {
                window.top.window.outerWidth = window.screen.width
            } catch (e) { }
        </script><script>try {
                        Object.defineProperty(screen, "availTop", { value: 0 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "availLeft", { value: 0 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "availWidth", { value: 1920 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "availHeight", { value: 1080 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "colorDepth", { value: 24 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "pixelDepth", { value: 24 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(navigator, "hardwareConcurrency", { value: 8 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(navigator, "appVersion", { value: "5.0 (Windows)" });
                    } catch (e) {}
                    try {
                        Object.defineProperty(navigator, "doNotTrack", { value: "unspecified" });
                    } catch (e) {}
                    
            try {
                window.screenY = 1072
            } catch (e) { }
        
            try {
                window.screenTop = 1072
            } catch (e) { }
        
            try {
                window.top.window.outerHeight = window.screen.height
            } catch (e) { }
        
            try {
                window.screenX = -8
            } catch (e) { }
        
            try {
                window.screenLeft = -8
            } catch (e) { }
        
            try {
                window.top.window.outerWidth = window.screen.width
            } catch (e) { }
        </script><script>try {
                        Object.defineProperty(screen, "availTop", { value: 0 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "availLeft", { value: 0 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "availWidth", { value: 1920 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "availHeight", { value: 1080 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "colorDepth", { value: 24 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "pixelDepth", { value: 24 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(navigator, "hardwareConcurrency", { value: 8 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(navigator, "appVersion", { value: "5.0 (Windows)" });
                    } catch (e) {}
                    try {
                        Object.defineProperty(navigator, "doNotTrack", { value: "unspecified" });
                    } catch (e) {}
                    
            try {
                window.screenY = 1072
            } catch (e) { }
        
            try {
                window.screenTop = 1072
            } catch (e) { }
        
            try {
                window.top.window.outerHeight = window.screen.height
            } catch (e) { }
        
            try {
                window.screenX = -8
            } catch (e) { }
        
            try {
                window.screenLeft = -8
            } catch (e) { }
        
            try {
                window.top.window.outerWidth = window.screen.width
            } catch (e) { }
        </script><script>try {
                        Object.defineProperty(screen, "availTop", { value: 0 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "availLeft", { value: 0 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "availWidth", { value: 1920 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "availHeight", { value: 1080 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "colorDepth", { value: 24 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(screen, "pixelDepth", { value: 24 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(navigator, "hardwareConcurrency", { value: 8 });
                    } catch (e) {}
                    try {
                        Object.defineProperty(navigator, "appVersion", { value: "5.0 (Windows)" });
                    } catch (e) {}
                    try {
                        Object.defineProperty(navigator, "doNotTrack", { value: "unspecified" });
                    } catch (e) {}
                    
            try {
                window.screenY = 1072
            } catch (e) { }
        
            try {
                window.screenTop = 1072
            } catch (e) { }
        
            try {
                window.top.window.outerHeight = window.screen.height
            } catch (e) { }
        
            try {
                window.screenX = -8
            } catch (e) { }
        
            try {
                window.screenLeft = -8
            } catch (e) { }
        
            try {
                window.top.window.outerWidth = window.screen.width
            } catch (e) { }
        </script></head>

    <body class="vsc-initialized"><!-- BEGIN WAYBACK TOOLBAR INSERT -->
<style type="text/css">
body {
  margin-top:0 !important;
  padding-top:0 !important;
  /*min-width:800px !important;*/
}
</style>
<script>__wm.rw(0);</script>
<div id="wm-ipp-base" style="display: block; direction: ltr;" lang="en">
</div><div id="donato" style="position:relative;width:100%;">
  <div id="donato-base">
    <iframe id="donato-if" src="GhostBusters_files/donate.htm" scrolling="no" style="width:100%; height:100%" frameborder="0">
    </iframe>
  </div>
</div><script type="text/javascript">
__wm.bt(625,27,25,2,"web","https://shroomdruid.github.io/GhostBusters/","20201101075748",1996,"/_static/",["/_static/css/banner-styles.css?v=bsmaklHF","/_static/css/iconochive.css?v=qtvMKcIJ"]);
  __wm.rw(1);
</script>
<!-- END WAYBACK TOOLBAR INSERT -->
        <div id="wrapper">
            <div id="evidence">
                <h1>Evidence found</h1>
                <div class="button" id="emf" onclick="toggleEvidence(1)" style="background-image: url(&quot;btnsUnchecked/emf.png&quot;);"></div>
                <div class="button" id="spiritbox" onclick="toggleEvidence(2)" style="background-image: url(&quot;btnsUnchecked/spiritbox.png&quot;);"></div>
                <div class="button" id="fingerprints" onclick="toggleEvidence(3)" style="background-image: url(&quot;btnsUnchecked/fingerprints.png&quot;);"></div>
                <div class="button" id="ghostorbs" onclick="toggleEvidence(4)" style="background-image: url(&quot;btnsUnchecked/ghostorbs.png&quot;);"></div>
                <div class="button" id="ghostwritings" onclick="toggleEvidence(5)" style="background-image: url(&quot;btnsUnchecked/ghostwritings.png&quot;);"></div>
                <div class="button" id="freezingtemperatures" onclick="toggleEvidence(6)" style="background-image: url(&quot;btnsUnchecked/freezingtemperatures.png&quot;);"></div>
            </div>
            <div id="ghosts">
                <h1>Possible Ghosts</h1>
                <ul id="possibleGhosts"><br><p>We need tangible evidence. I should check rooms with an EMF reader for activity, or a thermometer for sub-zero temperatures.</p></ul>
            </div>
        </div>
    

</body></html>
<!--
     FILE ARCHIVED ON 07:57:48 Nov 01, 2020 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 03:26:08 Nov 18, 2020.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
<!--
playback timings (ms):
  exclusion.robots.policy: 0.399
  esindex: 0.015
  LoadShardBlock: 79.62 (3)
  PetaboxLoader3.resolve: 41.923
  RedisCDXSource: 0.755
  load_resource: 87.238
  captures_list: 106.913
  CDXLines.iter: 22.386 (3)
  PetaboxLoader3.datanode: 87.335 (4)
  exclusion.robots: 0.416
-->